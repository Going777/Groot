pipeline {
  agent any
  post {
    failure {
      updateGitlabCommitStatus name: 'build', state: 'failed'
    }
    success {
      updateGitlabCommitStatus name: 'build', state: 'success'
    }
    aborted {
      updateGitlabCommitStatus name: 'build', state: 'canceled'
    }
  }
  options {
    gitLabConnection('Groot')
  }
  triggers {
    gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
  }
  stages {
    stage('init') {
      steps {
        echo 'init pipeline'
      }
    }
    stage('test-building') {
      steps {
        updateGitlabCommitStatus name: 'build', state: 'running'
        echo 'building'
      }
    }
    stage('test-built') {
      steps {
        updateGitlabCommitStatus name: 'done', state: 'success'
        echo 'done'
      }
    }
    // stage('cofing') {
    //   steps {
    //     echo 'copy configuration files'
    //     sh 'pwd'
    //     sh 'cp /var/jenkins_home/workspace/Groot_config/application.properties ./back-end/backend/src/main/resources'
    //   }
    // }
    // stage('build') {
    //   steps {
    //     echo 'move directory'
    //     dir('./back-end/backend/') {
    //       sh 'pwd'
    //       sh 'ls -l'
    //       echo 'start build'
    //       sh 'chmod +x ./gradlew'
    //       sh './gradlew clean build'
    //     }
    //   }
    // }
    // stage('unload') {
    //   environment {
    //     // CONTAINER_ID = sh 'docker ps -a | grep spring | awk \'{print $1\'}'
    //     CONTAINER_ID = sh(returnStdout: true, script: 'docker ps -a | grep spring | awk \'{print $1\'}').trim()
    //   }
    //   steps {
    //     // script {
    //     //   def output = sh(returnStdout: true, script: 'docker ps -a | grep spring | awk \'{print $1\'}')
    //     //   withEnv(['CONTAINER_I=' +  output.trim()]) {
    //     //     echo "${env.CONTAINER_I}"
    //     //   }
    //     // }
    //     echo 'unload docker container'
    //     echo "${env.CONTAINER_ID}"
    //     sh "docker stop ${env.CONTAINER_ID}"
    //     echo 'remove docker container'
    //     sh "docker rm ${env.CONTAINER_ID}"
    //   }
    // }
    // stage('deploy') {
    //   steps {
    //     sh 'pwd'
    //     dir('./back-end/backend/') {
    //       echo 'build docker image'
    //       sh 'docker build -t springboot .'
    //       echo 'run docker image'
    //       sh 'docker run --name spring -d -p 8080:8080 springboot'
    //     }
    //   }
    // }
  }
}